/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

#include<stdio.h>
//#include<conio.h>

void initialize();
struct process{
    char pid;
    char status;
    int at,nut;
    int wt;
    int q;
    int st;
    struct process *next;
 } ;
 struct process * getRunning();
 void addToReady(struct process *);
 void addToWaiting(struct process *);
 void updateStatus(struct process *);
void getUserInput(int n);
 void showStatus(int t);
 void updateWaitingTime();
void addToNAF(struct process *);
void addToProcesses(struct process *);
 struct process * ReadyFront=NULL,*ReadyRear=NULL,*WFront=NULL,*WRear=NULL,*NAF=NULL,*NAR=NULL;
 struct process * processesF=NULL, *processesR=NULL;

 
 int main(){
     int n=3,t=0,qt=1,quant,ch;struct process * temp,*running;
	printf("Choices Available\n");
	printf("1. User Input.\n");
	printf("2 Auto Generated\n");
	printf("Enter Choices:");
	scanf("%d",&ch);
     if(ch==1){
	printf("Enter no of process");
	scanf("%d",&n);
	//initialize();
	
	getUserInput(n);
	printf("Enter quant time:");scanf("%d",&quant);
	}
	else if(ch==2){
	n=3;
	initialize();
	quant=1;
	}
	else
	initialize();
     
     printf("T");
     for(temp=processesF;temp!=NULL;temp=temp->next){
         printf("\t %c",temp->pid);
        }
     printf("\n");
	qt=quant;
     
     for(t=0;n>=0&&t<8;t++)
     {
         for(temp=NAF;temp!=NULL;temp=temp->next) {
            if(temp->status=='N'&&temp->at==t){
                 //printf("%c",temp->pid);
                addToReady(temp);
                 //NAF=NAF->next;
            }
             }
         if(ReadyRear!=NULL)
             ReadyRear->next=NULL;
        if(qt==quant)
         {
             running=getRunning(t);
          }
         if(n==0)
         {
             showStatus(t);
             break;
         }
         if(running!=NULL){
         running->status='R';
         updateStatus(running);
         showStatus(t);
         updateWaitingTime();
        running->nut-=1;
         running->q+=1;
        // printf("Executing %c",running->pid);
         if(running->nut==0){
             running->status='F';
             updateStatus(running);
             n--;
             qt=quant;
         }else{
             qt--;
             if(qt==0){
                 running->status='W';
                 //printf("status changes to W %c\n",running->pid);
                 updateStatus(running);
                // printf("Added to waiting %c\n",running->pid);
                 addToWaiting(running);
                 qt=quant;
             }
         }
         }
      
     }
     for(temp=processesF;temp!=NULL;temp=temp->next){
         printf("\n Process id: %c , Arrival time:%d ,Start Time:%d,Waiting Time:%d, Burst Time:%d, Completion time:%d",
                 temp->pid,temp->at,temp->st,temp->wt,temp->nut,(temp->nut+temp->wt));
     }
             
     return 0;
 }
 
 void initialize(){
    struct process *temp,*temp1;
      temp= (struct process *)malloc(sizeof( struct process));
     temp->pid='A';
     temp->at=0;
     temp->nut=2;
     temp->status='N';
     temp->q=-1;
     temp->next=NULL;
     NAF=temp;
     NAR=temp;
      temp1= (struct process *)malloc(sizeof( struct process));
      temp1->pid=temp->pid;
      temp1->at=temp->at;
      temp1->nut=temp->nut;
      temp1->status=temp->status;
      temp1->q=temp->q;
      temp1->next=temp->next;
      processesR=temp1;processesF=temp1;
     temp= (struct process *)malloc(sizeof(struct process));
     temp->pid='B';
     temp->at=0;
     temp->nut=3;
     temp->status='N';
     temp->q=-1;
     temp->next=NULL;
     NAR->next=temp;
     NAR=temp;
     temp1= (struct process *)malloc(sizeof( struct process));
      temp1->pid=temp->pid;
      temp1->at=temp->at;
      temp1->nut=temp->nut;
      temp1->status=temp->status;
      temp1->q=temp->q;
      temp1->next=temp->next;
      processesR->next=temp1;processesR=temp1;
     temp= (struct process *)malloc(sizeof(struct process));
     temp->pid='C';
     temp->at=3;
     temp->nut=2;
     temp->status='N';
     temp->q=-1;
     temp->next=NULL;
     NAR->next=temp;
     NAR=temp;
     temp1= (struct process *)malloc(sizeof( struct process));
      temp1->pid=temp->pid;
      temp1->at=temp->at;
      temp1->nut=temp->nut;
      temp1->status=temp->status;
      temp1->q=temp->q;
      temp1->next=temp->next;
      processesR->next=temp1;processesR=temp1;
     for(temp=NAF;temp!=NULL;temp=temp->next) {
         printf("%c %c %d %d \n",temp->pid,temp->status,temp->at,temp->nut);
        }
      for(temp=processesF;temp!=NULL;temp=temp->next) {
         printf("%c %c %d %d \n",temp->pid,temp->status,temp->at,temp->nut);
        } 
 }
 
 void addToReady(struct process * temp)
 {
     temp->status='W';
         temp->q=0;
         temp->wt=0;
         updateStatus(temp);
         struct process *temp1;
         //printf("%c added to ready",temp->pid);
         temp1= (struct process *)malloc(sizeof( struct process));
      temp1->pid=temp->pid;
      temp1->at=temp->at;
      temp1->nut=temp->nut;
      temp1->status=temp->status;
      temp1->q=temp->q;
      temp1->wt=temp->wt;
         //printf("%c added to ready",temp->pid);
     if(ReadyFront==NULL)
     {        
         ReadyFront=temp1;
         ReadyRear=temp1;
         ReadyRear->next=NULL;         
     }else{
         ReadyRear->next=temp1;
         ReadyRear=temp1;
        ReadyRear->next = NULL;
     }
 }
 void updateStatus(struct process * temp)
 {
     struct process * temp1;
     for(temp1=processesF;temp1!=NULL;temp1=temp1->next)
     { if(temp1->pid==temp->pid){
         temp1->q=temp->q;
     temp1->status=temp->status;
     temp1->wt=temp->wt;
     temp1->st=temp->st;
     }}
 }
 
 struct process * getRunning(int t)
 {
     struct process *running;
     if(ReadyFront!=NULL){
         running=ReadyFront;
         running->st=t;
         updateStatus(running);
         ReadyFront=ReadyFront->next;
     }else if(WFront!=NULL)
     {
         running=WFront;
         WFront=WFront->next;
     }else 
         running=NULL;
     
       return running;
 }
 void addToWaiting(struct process * temp)
 {
     struct process *temp1;
         //printf("%c added to ready\n",temp->pid);
      temp1= (struct process *)malloc(sizeof( struct process));
      temp1->pid=temp->pid;
      temp1->at=temp->at;
      temp1->nut=temp->nut;
      temp1->status=temp->status;
      temp1->q=temp->q;
      temp1->wt=temp->wt;
      temp1->st=temp->st;
   if(WFront==NULL)
     {        
         WFront=temp1;
         WRear=temp1;
         WRear->next=NULL;         
     }else{
       WRear->next=temp1;
       temp1->next=NULL;
       WRear=temp1;
     }
       
    }
 void showStatus(int t)
 {
     
     printf("%d",t);
     struct process * temp;
     for(temp=processesF;temp!=NULL;temp=temp->next){
         if(temp->status=='F')
             printf("\tF");
         else if(temp->status=='N')
             printf("\t-");
         else
             printf("\t%c(q%d)",temp->status,temp->q);
        }
     printf("\n");
 }
 
 void updateWaitingTime(){
     struct process * temp;
     for(temp=ReadyFront;temp!=NULL;temp=temp->next){
         if(temp->status=='W'){
             temp->wt+=1;
         }
     }
     for(temp=WFront;temp!=NULL;temp=temp->next){
         if(temp->status=='W'){
             temp->wt+=1;
         }
 }
 }
void getUserInput(int n)
{
int i=0,a,nt;struct process * temp;
for(i=0;i<n;i++)
{
printf("For process %c\n",(i+65));
printf("Enter Arrival time");scanf("%d",&a);
printf("Enter CPU time:");scanf("%d",&nt);
temp=(struct process *)malloc(sizeof(struct process));
temp->pid=(char)i+65;
temp->at=a;
     temp->nut=nt;
     temp->status='N';
     temp->q=-1;
     temp->next=NULL;
	addToNAF(temp);
	addToProcesses(temp);
}
//initialize();
}


void addToNAF(struct process * temp)
{
struct process *temp1;
         //printf("%c added to ready\n",temp->pid);
      temp1= (struct process *)malloc(sizeof( struct process));
      temp1->pid=temp->pid;
      temp1->at=temp->at;
      temp1->nut=temp->nut;
      temp1->status=temp->status;
      temp1->q=temp->q;
      temp1->wt=temp->wt;
      temp1->st=temp->st;
   if(NAF==NULL)
     {        
         NAF=temp1;
         NAR=temp1;
         NAR->next=NULL;         
     }else{
       NAR->next=temp1;
       temp1->next=NULL;
       NAR=temp1;
     }
}
void addToProcesses(struct process * temp)
{
struct process *temp1;
         //printf("%c added to ready\n",temp->pid);
      temp1= (struct process *)malloc(sizeof( struct process));
      temp1->pid=temp->pid;
      temp1->at=temp->at;
      temp1->nut=temp->nut;
      temp1->status=temp->status;
      temp1->q=temp->q;
      temp1->wt=temp->wt;
      temp1->st=temp->st;
   if(processesF==NULL)
     {        
         processesF=temp1;
         processesR=temp1;
         processesR->next=NULL;         
     }else{
       processesR->next=temp1;
       temp1->next=NULL;
       processesR=temp1;
     }
}
 













